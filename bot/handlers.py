"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è Telegram –±–æ—Ç–∞.
–£–±–∏—Ä–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –∏ —É–ª—É—á—à–∞–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å.
"""

from aiogram import types, Bot
import html
import asyncio
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice
from aiogram.utils.exceptions import MessageNotModified
import logging
import os

from config import ADMIN_IDS, PROVIDER_TOKEN, CURRENCY, USE_YOOKASSA
from payments import create_redirect_payment, get_payment_status
from db import save_payment, update_payment_status, get_payment, mark_payment_applied
from api import get_session_cached, check_if_client_exists, get_client_info, add_client_days, extend_client_days, generate_vless_link
from db import upsert_user_on_start, set_vpn_email, get_user_by_tg, redeem_promo, add_promo, list_users, count_users, count_users_with_vpn, count_promos, sum_promo_uses, list_promos, sync_users_with_xui
from keyboards import kb_main, kb_buy_menu, kb_buy_plans, kb_promo_back, kb_guide, admin_kb, kb_payment
from ui import edit_menu_text, edit_menu_text_pm
from callbacks import ADMIN_PROMOS
from tariffs import TariffService, all_services, get_service, get_plan, DEFAULT_SERVICE_KEY, auto_assign_services


class MessageHandler:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±—â–∏–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏."""
    
    def __init__(self, bot: Bot):
        self.bot = bot
    
    async def safe_edit_message(self, chat_id: int, msg_id: int, text: str, 
                              reply_markup: InlineKeyboardMarkup = None, 
                              parse_mode: str = "Markdown") -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        try:
            await self.bot.edit_message_text(text, chat_id, msg_id, parse_mode=parse_mode)
            if reply_markup:
                await self.bot.edit_message_reply_markup(chat_id, msg_id, reply_markup=reply_markup)
            return True
        except MessageNotModified:
            return True
        except Exception:
            return False
    
    async def get_menu_data(self, state: FSMContext, message: types.Message = None, call: types.CallbackQuery = None):
        """–ü–æ–ª—É—á–∏—Ç—å chat_id –∏ msg_id –ø—Ä–∏–æ—Ä–∏—Ç–µ–∑–∏—Ä—É—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π id –º–µ–Ω—é –∏–∑ state."""
        data = await state.get_data()
        chat_id = data.get("menu_chat_id")
        msg_id = data.get("menu_msg_id")
        if chat_id and msg_id:
            return chat_id, msg_id
        if call:
            return call.message.chat.id, call.message.message_id
        if message:
            return message.chat.id, message.message_id
        return None, None
    
    async def delete_user_message(self, message: types.Message):
        """–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞."""
        try:
            await message.delete()
        except Exception:
            pass
    
    async def show_loading_feedback(self, chat_id: int, msg_id: int, text: str = "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..."):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
        # —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        try:
            await self.bot.edit_message_reply_markup(chat_id, msg_id, reply_markup=None)
        except Exception:
            pass
        await self.safe_edit_message(chat_id, msg_id, text, parse_mode="Markdown")
    
    async def handle_vpn_operation(
        self,
        user_id: int,
        days: int,
        service_key: str = DEFAULT_SERVICE_KEY,
        operation_name: str = "–æ–ø–µ—Ä–∞—Ü–∏—è",
    ) -> bool:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ VPN –æ–ø–µ—Ä–∞—Ü–∏–π (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–Ω–µ–π)."""
        service = get_service(service_key) or get_service(DEFAULT_SERVICE_KEY)
        if not service:
            logging.error("Unknown service %s for VPN operation %s", service_key, operation_name)
            return False

        session = get_session_cached()
        if not session:
            return False

        primary_email = service.email_for_user(user_id)
        if not self._apply_service_days(session, user_id, days, service):
            logging.error(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å %s (%s) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s",
                service.key,
                operation_name,
                user_id,
            )
            return False

        extras_ok = True
        for extra_service in auto_assign_services():
            if extra_service.key == service.key:
                continue
            if not self._apply_service_days(session, user_id, days, extra_service):
                logging.error(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –¥–æ–ø. —Å–µ—Ä–≤–∏—Å %s –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s (%s)",
                    extra_service.key,
                    user_id,
                    operation_name,
                )
                extras_ok = False

        if not extras_ok:
            return False

        if service_key == DEFAULT_SERVICE_KEY:
            set_vpn_email(user_id, primary_email)
        return True
    
    def compute_show_trial(self, user_id: int) -> bool:
        """–í—ã—á–∏—Å–ª–∏—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É —Ç–µ—Å—Ç–∞."""
        user = get_user_by_tg(user_id)
        return not bool(user and user.get("vpn_email"))
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º."""
        return user_id in ADMIN_IDS

    def _apply_service_days(self, session, user_id: int, days: int, service: TariffService) -> bool:
        """–°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–∏—Å–µ –Ω–∞ –Ω—É–∂–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π."""
        email = service.email_for_user(user_id)
        inbound_id = service.inbound_id
        if check_if_client_exists(session, email, inbound_id=inbound_id):
            return extend_client_days(session, user_id, days, inbound_id=inbound_id, email=email)

        result = add_client_days(session, user_id, days, inbound_id=inbound_id, email=email)
        if isinstance(result, dict):
            return bool(result.get("client_id"))
        return bool(result)


class UserHandlers(MessageHandler):
    """–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

    @staticmethod
    def _split_plan_code(plan_code: str) -> tuple[str, str]:
        if not plan_code:
            return DEFAULT_SERVICE_KEY, ""
        if ":" in plan_code:
            service_key, plan_key = plan_code.split(":", 1)
            return service_key or DEFAULT_SERVICE_KEY, plan_key or ""
        return DEFAULT_SERVICE_KEY, plan_code
    
    async def handle_start(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        await state.finish()
        tg = message.from_user
        upsert_user_on_start(
            tg_id=tg.id,
            username=tg.username,
            first_name=tg.first_name,
            last_name=tg.last_name,
        )

        # --- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ë–î —Å XUI ---
        session = get_session_cached()
        if session:
            if check_if_client_exists(session, tg.id):
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ XUI - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º vpn_email
                set_vpn_email(tg.id, str(tg.id))
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ XUI - –æ—á–∏—â–∞–µ–º vpn_email –µ—Å–ª–∏ –±—ã–ª
                user = get_user_by_tg(tg.id)
                if user and user.get("vpn_email"):
                    set_vpn_email(tg.id, None)
                    logging.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –æ—á–∏—â–µ–Ω vpn_email –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg.id}")
        # ---------------------------------

        is_vpn = bool(get_user_by_tg(tg.id) and get_user_by_tg(tg.id).get("vpn_email"))
        is_admin = self.is_admin(tg.id)
        show_trial = self.compute_show_trial(tg.id)
        kb = kb_main(show_trial=show_trial, is_admin=is_admin)

        if is_vpn:
            text = (
                "–ü—Ä–∏–≤–µ—Ç! –¢—ã —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º!\n\n"
                "üîó –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞¬ª.\n"
                "‚è≥ –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞¬ª.\n"
                "üí∞ –ü—Ä–æ–¥–ª–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª.\n"
                "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è¬ª.\n\n"
                "üí¨ –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞—à–ª–∏ –æ—à–∏–±–∫—É - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª ¬´–ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª"
            )
        else:
            text = (
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ë—ã—Å—Ç—Ä–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ, –Ω–∞–¥–µ–∂–Ω–æ.\n\n"
                "üí∞ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª.\n"
                "üéÅ –í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–µ—Å—Ç–æ–º –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–¢–µ—Å—Ç –Ω–∞ 3 –¥–Ω—è¬ª"
                "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è¬ª\n\n"
                "üí¨ –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞—à–ª–∏ –æ—à–∏–±–∫—É - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª ¬´–ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª"
            )
        sent = await message.answer(text, reply_markup=kb)
        await state.update_data(menu_msg_id=sent.message_id)

    async def handle_dossier(self, call: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        session = get_session_cached()
        if not session:
            await call.answer("–°–µ—Ä–≤–µ—Ä —Å–ø–∏—Ç.", show_alert=True)
            return
        
        user_id = call.from_user.id
        services_info = []
        is_admin = self.is_admin(user_id)

        for service in all_services(include_hidden=True):
            email = service.email_for_user(user_id)
            inbound, client = get_client_info(session, email, inbound_id=service.inbound_id)
            if inbound and client:
                services_info.append((service, inbound, client))
            elif service.key == DEFAULT_SERVICE_KEY:
                user = get_user_by_tg(user_id)
                if user and user.get("vpn_email"):
                    set_vpn_email(user_id, None)
                    logging.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –æ—á–∏—â–µ–Ω vpn_email –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        kb = kb_main(show_trial=self.compute_show_trial(user_id), is_admin=is_admin)

        if not services_info:
            await edit_menu_text(call, "–í—ã –µ—â–µ –Ω–µ –æ—Ñ–æ—Ä–º–ª—è–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É", kb)
            return

        def fmt_exp(ms):
            try:
                ms = int(ms)
                if ms == 0:
                    return "–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ"
                from datetime import datetime
                return datetime.fromtimestamp(ms / 1000).strftime("%d.%m.%Y %H:%M")
            except Exception:
                return str(ms)

        sections = [f"–ü—Ä–æ—Ñ–∏–ª—å: @{call.from_user.username or '-'}"]
        for service, inbound, client in services_info:
            link = generate_vless_link(inbound, client)
            expiry = fmt_exp(client.get('expiryTime', 0))
            extra = " (–±–µ—Å—Å—Ä–æ—á–Ω–æ)" if expiry == "–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ" else ""
            sections.append(
                f"<b>{service.name}</b>\n"
                f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expiry}{extra}\n"
                f"–°—Å—ã–ª–∫–∞:\n<pre><code>{html.escape(link)}</code></pre>"
            )

        text = "\n\n".join(sections)
        await edit_menu_text_pm(call, text, kb, parse_mode="HTML")

    async def handle_trial(self, call: types.CallbackQuery):
        """–í—ã–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 3 –¥–Ω—è."""
        session = get_session_cached()
        if not session:
            await call.answer("–°–µ—Ä–≤–µ—Ä –æ—Ç–¥—ã—Ö–∞–µ—Ç.", show_alert=True)
            return
        
        if not self.compute_show_trial(call.from_user.id):
            await call.answer("–í—ã —É–∂–µ –±—Ä–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥", show_alert=True)
            return
        
        ok = await self.handle_vpn_operation(
            call.from_user.id,
            days=3,
            service_key=DEFAULT_SERVICE_KEY,
            operation_name="—Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø",
        )
        if ok:
            is_admin = self.is_admin(call.from_user.id)
            kb = kb_main(show_trial=False, is_admin=is_admin)
            await edit_menu_text(call, "–í—ã–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 3 –¥–Ω—è.\n–°—Å—ã–ª–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞¬ª.", kb)
        else:
            await call.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

    async def handle_buy(self, call: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏."""
        is_admin = self.is_admin(call.from_user.id)
        lines = ["–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π:\n"]
        for service in all_services():
            lines.append(f"‚Ä¢ *{service.name}* ‚Äî {service.description}")
        lines.append("\n–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ –ø–æ—è–≤—è—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã –∏ —Ü–µ–Ω—ã.")
        text = "\n".join(lines)
        await edit_menu_text(call, text, kb_buy_menu(is_admin=is_admin))

    async def handle_buy_service(self, call: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–∏."""
        try:
            _, service_key = (call.data or "").split(":", 1)
        except ValueError:
            await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Å–ª—É–≥—É.", show_alert=True)
            return

        service = get_service(service_key)
        if not service:
            await call.answer("–£—Å–ª—É–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)
            return

        is_admin = self.is_admin(call.from_user.id)
        kb = kb_buy_plans(service, is_admin=is_admin)
        text = (
            f"–¢–∞—Ä–∏—Ñ ¬´{service.name}¬ª.\n\n"
            f"{service.description}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:" 
        )
        await edit_menu_text(call, text, kb)

    async def handle_buy_plan(self, call: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∫—É–ø–∫—É –ø–ª–∞–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏."""
        try:
            _, service_key, plan_key = (call.data or "").split(":", 2)
        except ValueError:
            await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–ª–∞–Ω.", show_alert=True)
            return

        service = get_service(service_key)
        plan = get_plan(service_key, plan_key)
        if not service or not plan:
            await call.answer("–ü–ª–∞–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True)
            return

        if plan.admin_only and not self.is_admin(call.from_user.id):
            await call.answer("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.", show_alert=True)
            return

        days = plan.days
        amount = plan.amount_minor
        plan_code = f"{service_key}:{plan_key}"
        description = f"{service.name}: –¥–æ—Å—Ç—É–ø –Ω–∞ {days} –¥–Ω–µ–π"
        is_admin = self.is_admin(call.from_user.id)

        logging.info(
            "purchase_selected: user=%s service=%s plan=%s days=%s amount_minor=%s",
            call.from_user.id,
            service_key,
            plan_key,
            days,
            amount,
        )

        if USE_YOOKASSA:
            # YooKassa Smart Payment: —Å–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç–µ–∂ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É-–Ω–∞–≤–∏–≥–∞—Ü–∏—é
            rub = amount / 100.0
            bot_user = (await self.bot.get_me()).username
            pay = create_redirect_payment(
                amount_rub=rub,
                description=description,
                bot_username=bot_user,
                user_id=call.from_user.id,
            )
            if pay and pay.get("confirmation_url"):
                url = pay["confirmation_url"]
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç—ë–∂
                try:
                    save_payment(
                        payment_id=pay.get("id") or "",
                        tg_id=call.from_user.id,
                        plan=plan_code,
                        days=days,
                        amount=amount,
                        currency=CURRENCY or "RUB",
                        status=pay.get("status") or "pending",
                    )
                except Exception:
                    pass
                kb = kb_payment(url, pay.get('id') or '')
                await edit_menu_text(call, "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ ‚Äò–Ø –æ–ø–ª–∞—Ç–∏–ª ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å‚Äô.", kb)
            else:
                err = (pay or {}).get("error") if isinstance(pay, dict) else "unknown"
                logging.error("YooKassa payment creation failed: %s", err)
                await call.answer("–ü–ª–∞—Ç—ë–∂ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ÆKassa –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            return

        if not USE_YOOKASSA and not PROVIDER_TOKEN:
            # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã ‚Äî –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–∞—á–∏—Å–ª—è–µ–º –¥–Ω–∏ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)
            ok = await self.handle_vpn_operation(call.from_user.id, days, service_key=service_key)
            is_admin = self.is_admin(call.from_user.id)
            kb = kb_main(show_trial=False, is_admin=is_admin)
            await edit_menu_text(call, ("–ù–∞—á–∏—Å–ª–µ–Ω–æ: "+str(days)+" –¥–Ω. (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)") if ok else "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", kb)
            return

        title = f"{service.name} ‚Äî {plan.days} –¥–Ω."
        description_invoice = f"–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏ ‚Äò{service.name}‚Äô –Ω–∞ {days} –¥–Ω–µ–π."
        payload = f"service:{service_key};plan:{plan_key};days:{days}"
        prices = [LabeledPrice(label=plan.label, amount=amount)]

        await self.bot.send_invoice(
            chat_id=call.message.chat.id,
            title=title,
            description=description_invoice,
            payload=payload,
            provider_token=PROVIDER_TOKEN,
            currency=CURRENCY or "RUB",
            prices=prices,
            need_name=False,
            need_phone_number=False,
            need_email=False,
            is_flexible=False,
        )

    async def handle_pre_checkout(self, query: types.PreCheckoutQuery):
        try:
            await self.bot.answer_pre_checkout_query(pre_checkout_query_id=query.id, ok=True)
        except Exception:
            try:
                await self.bot.answer_pre_checkout_query(pre_checkout_query_id=query.id, ok=False, error_message="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except Exception:
                pass

    async def handle_successful_payment(self, message: types.Message):
        try:
            payload = message.successful_payment.invoice_payload or ""
            parts = dict(p.split(":", 1) for p in payload.split(";") if ":" in p)
            days = int(parts.get("days", "30"))
            service_key = parts.get("service", DEFAULT_SERVICE_KEY)
        except Exception:
            days = 30
            service_key = DEFAULT_SERVICE_KEY

        sp = message.successful_payment
        charge_id = getattr(sp, "provider_payment_charge_id", "")
        total_amount = getattr(sp, "total_amount", 0)
        currency = getattr(sp, "currency", "RUB")

        ok = await self.handle_vpn_operation(message.from_user.id, days, service_key=service_key)
        is_admin = self.is_admin(message.from_user.id)
        kb = kb_main(show_trial=False, is_admin=is_admin)
        text = "–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ " + str(days) + " –¥–Ω." if ok else "–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        try:
            await message.answer(text, reply_markup=kb)
        except Exception:
            pass
        # –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ –æ –ø–ª–∞—Ç–µ–∂–µ (–ÆKassa charge_id)
        note = (
            f"[PAYMENT] user={message.from_user.id}, days={days}, amount={total_amount} {currency}, charge_id={charge_id}"
        )
        for admin_id in ADMIN_IDS:
            try:
                await self.bot.send_message(admin_id, note)
            except Exception:
                pass

    async def handle_promo_start(self, call: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞—Ç—å –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
        from bot import PromoStates
        await PromoStates.waiting_code.set()
        await state.update_data(menu_chat_id=call.message.chat.id, menu_msg_id=call.message.message_id)
        await edit_menu_text(call, "–í–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥", kb_promo_back())

    async def handle_promo_text(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥."""
        code = (message.text or "").strip()
        chat_id, msg_id = await self.get_menu_data(state, message=message)
        
        await self.delete_user_message(message)
        await self.show_loading_feedback(chat_id, msg_id, "–ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–æ–º–æ–∫–æ–¥...")
        
        info = redeem_promo(code, message.from_user.id)
        if not info.get("ok"):
            # –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–µ—Ä–Ω—É—Ç—å –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥
            await self.safe_edit_message(chat_id, msg_id, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑", 
                                       reply_markup=kb_promo_back(), parse_mode="Markdown")
            return
        
        days = max(1, int(info.get("days", 0)))
        await self.show_loading_feedback(chat_id, msg_id, f"–ö–æ–¥ –ø—Ä–∏–Ω—è—Ç. –ù–∞—á–∏—Å–ª—è—é {days} –¥–Ω...")
        
        session = get_session_cached()
        if not session:
            # –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–µ—Ä–Ω—É—Ç—å –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥
            await self.safe_edit_message(chat_id, msg_id, "–°–µ—Ä–≤–µ—Ä —É—Å—Ç–∞–ª. –ó–∞–±–µ—Ä—ë—à—å –ø–æ–∑–∂–µ.", 
                                       reply_markup=kb_promo_back(), parse_mode="Markdown")
            return
        
        await self.handle_vpn_operation(message.from_user.id, days)
        
        await state.finish()
        is_admin = self.is_admin(message.from_user.id)
        kb = kb_main(show_trial=False, is_admin=is_admin)
        await self.safe_edit_message(chat_id, msg_id, f"–ù–∞—á–∏—Å–ª–µ–Ω–æ: {days} –¥–Ω.\n–°—Å—ã–ª–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞¬ª.", 
                                   reply_markup=kb, parse_mode="Markdown")

    async def handle_guide(self, call: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é."""
        text = (
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n\n"
            "1. –ù–∞–∂–º–∏ ¬´–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞¬ª ‚Äî —Ç–∞–º —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
            "2. –í—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–ü–ö –∏–ª–∏ –º–æ–±–∏–ª—å–Ω–æ–µ)\n"
            "3. –ü–æ–¥–∫–ª—é—á–∞–π—Å—è –∏ –ø–æ–ª—å–∑—É–π—Å—è\n"
            "4. –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚Äî –≤–æ–∑—å–º–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É\n"
            "5. –ü—Ä–æ–º–æ–∫–æ–¥—ã –∞–∫—Ç–∏–≤–∏—Ä—É–π —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É\n\n"
            "–í—ã–±–µ—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:"
        )
        await edit_menu_text(call, text, kb_guide(), disable_web_page_preview=True)

    async def handle_pay_check(self, call: types.CallbackQuery, payment_id: str):
        paid = False
        status = "unknown"
        if not payment_id:
            await call.answer("–ù–µ –Ω–∞–π–¥–µ–Ω –ø–ª–∞—Ç–µ–∂.", show_alert=True)
            return
        # –ë—ã—Å—Ç—Ä–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–æ–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑)
        attempts = 6
        final_status = None
        for _ in range(attempts):
            info = get_payment_status(payment_id) or {}
            if isinstance(info, dict) and info.get("error"):
                final_status = "unknown"
                paid = False
                status = "unknown"
            else:
                status = (info or {}).get("status") or "unknown"
                paid = bool((info or {}).get("paid"))
                final_status = status
            try:
                update_payment_status(payment_id, status)
            except Exception:
                pass
            if paid or status in ("succeeded", "canceled"):
                break
            try:
                await asyncio.sleep(1)
            except Exception:
                break

        if final_status == "succeeded" or (isinstance(info, dict) and info.get("paid")):
            p = get_payment(payment_id)
            if p and int(p.get("applied", 0)) == 1:
                await call.answer("–ü–ª–∞—Ç—ë–∂ —É–∂–µ –ø—Ä–∏–º–µ–Ω—ë–Ω.", show_alert=True)
                return
            days = int(p.get("days", 30)) if p else 30
            plan_code = (p or {}).get("plan", "") if p else ""
            service_key, _ = self._split_plan_code(plan_code)
            ok = await self.handle_vpn_operation(call.from_user.id, days, service_key=service_key)
            if p:
                try:
                    mark_payment_applied(payment_id)
                except Exception:
                    pass
            is_admin = self.is_admin(call.from_user.id)
            kb = kb_main(show_trial=False, is_admin=is_admin)
            await edit_menu_text(call, f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {days} –¥–Ω.", kb)
        elif final_status == "canceled":
            await edit_menu_text(call, "–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", kb_promo_back())
        else:
            await edit_menu_text(call, "–ü–ª–∞—Ç—ë–∂ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", kb_promo_back())

    async def handle_guide_detail(self, call: types.CallbackQuery, platform: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."""
        if platform == "pc":
            text = (
                "\U0001F5A5 –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ü–ö:\n\n"
                "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞¬ª –≤ –±–æ—Ç–µ. –ï—Å–ª–∏ —Å—Ä–æ–∫ –∏—Å—Ç—ë–∫ ‚Äî –ø—Ä–æ–¥–ª–∏—Ç–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥.\n"
                "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.\n"
                "3. –°–∫–∞—á–∞–π—Ç–µ –∫–ª–∏–µ–Ω—Ç InvisibleMan XRay: [InvisibleManXRay-x64.zip](https://github.com/InvisibleManVPN/InvisibleMan-XRayClient/releases/download/v3.2.5/InvisibleManXRay-x64.zip)\n"
                "4. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –∞—Ä—Ö–∏–≤ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ InvisibleManXRay.exe.\n"
                "5. –í –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ –Ω–∞–∂–º–∏—Ç–µ ‚ÄòManage server configuration‚Äô ‚Üí ‚Äò+‚Äô ‚Üí ‚ÄòImport from link‚Äô, –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –Ω–∞–∂–º–∏—Ç–µ ‚ÄòImport‚Äô.\n"
                "6. –í–∫–ª—é—á–∏—Ç–µ –∏ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å!\n\n"
                "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
            )
        elif platform == "mobile":
            text = (
                "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω:\n\n"
                "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞¬ª –≤ –±–æ—Ç–µ. –ï—Å–ª–∏ —Å—Ä–æ–∫ –∏—Å—Ç—ë–∫ ‚Äî –ø—Ä–æ–¥–ª–∏—Ç–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥.\n"
                "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.\n"
                "3. –°–∫–∞—á–∞–π—Ç–µ Hiddify:\n"
                "   ‚Ä¢ [–î–ª—è iOS](https://apps.apple.com/us/app/hiddify-proxy-vpn/id6596777532?platform=iphone)\n"
                "   ‚Ä¢ [–î–ª—è Android](https://play.google.com/store/apps/details?id=app.hiddify.com)\n"
                "4. –û—Ç–∫—Ä–æ–π—Ç–µ Hiddify, –Ω–∞–∂–º–∏—Ç–µ ‚Äò+‚Äô –≤ –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ‚Äò–í—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞‚Äô ‚Äî –ø—Ä–æ—Ñ–∏–ª—å –¥–æ–±–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
                "5. –í–∫–ª—é—á–∏—Ç–µ –∏ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å!\n\n"
                "–í–∞–∂–Ω–æ: –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–¥–∞–ª–∏—Ç–µ –¥—Ä—É–≥–∏–µ VPN-–ø—Ä–æ—Ñ–∏–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å –∫–Ω–æ–ø–∫–∏.\n\n"
                "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
            )
        await edit_menu_text(call, text, kb_guide(), disable_web_page_preview=True)

    async def handle_support_start(self, call: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."""
        from bot import SupportStates
        await SupportStates.waiting_issue.set()
        await state.update_data(menu_chat_id=call.message.chat.id, menu_msg_id=call.message.message_id)
        await edit_menu_text(call, "–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É. –ü–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º ‚Äî –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π", kb_promo_back())

    async def handle_support_text(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."""
        issue = (message.text or "").strip()
        chat_id, msg_id = await self.get_menu_data(state, message=message)
        
        await self.delete_user_message(message)
        
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞–º
        for admin_id in ADMIN_IDS:
            try:
                await self.bot.send_message(admin_id, f"[SUPPORT] –æ—Ç @{message.from_user.username or message.from_user.id} ({message.from_user.id}): {issue}")
            except Exception:
                pass
        
        await state.finish()
        kb = kb_main(show_trial=self.compute_show_trial(message.from_user.id), 
                    is_admin=self.is_admin(message.from_user.id))
        # —Ñ–∏–Ω–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–µ—Ä–Ω—É—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await self.safe_edit_message(chat_id, msg_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤–∏–¥—è—Ç –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", 
                                   reply_markup=kb)


class AdminHandlers(MessageHandler):
    """–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    
    async def handle_admin(self, call: types.CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."""
        if not self.is_admin(call.from_user.id):
            await call.answer("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.", show_alert=True)
            return
        await state.finish()
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–õ–æ–≥–∏' –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        kb = InlineKeyboardMarkup(row_width=1)
        kb.add(InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"))
        kb.add(InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ ID", callback_data="admin_search"))
        kb.add(InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"))
        kb.add(InlineKeyboardButton("üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin_promos"))
        kb.add(InlineKeyboardButton("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", callback_data="admin_sync"))
        kb.add(InlineKeyboardButton("üßæ –õ–æ–≥–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ)", callback_data="admin_logs"))
        kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
        await edit_menu_text(call, "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", kb)

    async def handle_broadcast_start(self, call: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É."""
        if not self.is_admin(call.from_user.id):
            await call.answer("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.", show_alert=True)
            return
        
        from bot import AdminStates
        await AdminStates.waiting_broadcast.set()
        await state.update_data(menu_chat_id=call.message.chat.id, menu_msg_id=call.message.message_id)
        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin"))
        await edit_menu_text(call, "–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", kb)

    async def handle_broadcast_send(self, message: types.Message, state: FSMContext):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É."""
        if not self.is_admin(message.from_user.id):
            await state.finish()
            return
        
        chat_id, msg_id = await self.get_menu_data(state, message=message)
        await self.delete_user_message(message)
        
        users = list_users(limit=100000)
        sent = 0
        for u in users:
            try:
                kb_ok = InlineKeyboardMarkup().add(InlineKeyboardButton("OK", callback_data="dismiss"))
                await self.bot.send_message(u.get("tg_id"), message.text, reply_markup=kb_ok)
                sent += 1
            except Exception:
                pass
        
        await state.finish()
        await self.safe_edit_message(chat_id, msg_id, f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", 
                                   reply_markup=admin_kb(), parse_mode="Markdown")

    async def handle_promos_menu(self, call: types.CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤."""
        if not self.is_admin(call.from_user.id):
            await call.answer("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.", show_alert=True)
            return
        
        await state.finish()
        promos = list_promos(active_only=True, limit=50, offset=0)
        if promos:
            lines = [f"{p['code']}: {p.get('days',0)} –¥–Ω, {p['used_count']}/{p['max_uses']}" for p in promos]
            text = "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n" + "\n".join(lines)
            if len(promos) == 50:
                text += "\n... –∏ –µ—â—ë. –£—Ç–æ—á–Ω–∏ —Ñ–∏–ª—å—Ç—Ä/–ø–∞–≥–∏–Ω–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."
        else:
            text = "–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ—Ç."
        
        kb = InlineKeyboardMarkup(row_width=1)
        kb.add(InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="admin_promo_new"))
        kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin"))
        await edit_menu_text(call, text, kb)

    async def handle_promo_new_start(self, call: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
        if not self.is_admin(call.from_user.id):
            await call.answer("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.", show_alert=True)
            return
        
        from bot import AdminStates
        await AdminStates.waiting_promo.set()
        await state.update_data(menu_chat_id=call.message.chat.id, menu_msg_id=call.message.message_id)
        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=ADMIN_PROMOS))
        text = "–í–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ö–û–î –î–ù–ï–ô –õ–ò–ú–ò–¢\n–ü—Ä–∏–º–µ—Ä: FREE 3 50  (3 –¥–Ω—è, –¥–æ 50 –∞–∫—Ç–∏–≤–∞—Ü–∏–π)"
        await edit_menu_text(call, text, kb)

    async def handle_promo_create(self, message: types.Message, state: FSMContext):
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥."""
        if not self.is_admin(message.from_user.id):
            await state.finish()
            return
        
        chat_id, msg_id = await self.get_menu_data(state, message=message)
        await self.delete_user_message(message)
        
        parts = (message.text or "").split()
        if len(parts) != 3:
            await self.safe_edit_message(chat_id, msg_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: FREE 3 50", 
                                       reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=ADMIN_PROMOS)), 
                                       parse_mode="Markdown")
            return
        
        code, days_str, limit_str = parts
        try:
            days_val = int(days_str)
            limit_val = int(limit_str)
        except Exception:
            days_val = 0
            limit_val = 0
        
        if days_val <= 0 or limit_val <= 0:
            await self.safe_edit_message(chat_id, msg_id, "–ù–µ–≤–µ—Ä–Ω—ã–µ —á–∏—Å–ª–∞. –ü—Ä–∏–º–µ—Ä: FREE 3 50", 
                                       reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=ADMIN_PROMOS)), 
                                       parse_mode="Markdown")
            return
        
        ok = add_promo(code, days=days_val, max_uses=limit_val)
        await state.finish()
        await self.safe_edit_message(chat_id, msg_id, "–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω." if ok else "–¢–∞–∫–æ–π –∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", 
                                   reply_markup=admin_kb(), parse_mode="Markdown")

    async def handle_search_start(self, call: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if not self.is_admin(call.from_user.id):
            await call.answer("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.", show_alert=True)
            return

        from bot import AdminStates
        await AdminStates.waiting_search_tg.set()
        await state.update_data(menu_chat_id=call.message.chat.id, menu_msg_id=call.message.message_id)
        
        from callbacks import ADMIN
        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=ADMIN))
        from ui import edit_menu_text_pm
        await edit_menu_text_pm(call, "–í–≤–µ–¥–∏ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", kb, parse_mode="HTML")

    async def handle_search_process(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ —Å –Ω—É–ª—è –∫–∞–∫ —Ä–∞—Å—Å—ã–ª–∫–∞."""
        if not self.is_admin(message.from_user.id):
            await state.finish()
            return
        
        chat_id, msg_id = await self.get_menu_data(state, message=message)
        await self.delete_user_message(message)
        
        tg_str = (message.text or "").strip()
        try:
            tg_req = int(tg_str)
        except Exception:
            tg_req = None
        
        if tg_req is None:
            # –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ - –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
            kb = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin"))
            await self.safe_edit_message(chat_id, msg_id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –µ—â—ë —Ä–∞–∑", 
                                       reply_markup=kb, parse_mode="Markdown")
            return
        
        user = get_user_by_tg(tg_req)
        if not user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
            kb = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin"))
            await self.safe_edit_message(chat_id, msg_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑", 
                                       reply_markup=kb, parse_mode="Markdown")
            return
        
        # –£—Å–ø–µ—à–Ω—ã–π –ø–æ–∏—Å–∫ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await state.finish()
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        kb_admin = InlineKeyboardMarkup(row_width=1)
        kb_admin.add(InlineKeyboardButton("üì£ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"))
        kb_admin.add(InlineKeyboardButton("üîé –ü–æ–∏—Å–∫ –ø–æ tg_id", callback_data="admin_search"))
        kb_admin.add(InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"))
        kb_admin.add(InlineKeyboardButton("üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin_promos"))
        kb_admin.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        text = (
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
            f"- tg_id: <code>{html.escape(str(user.get('tg_id')))}</code>\n"
            f"- username: <code>@{html.escape(str(user.get('username') or '-'))}</code>\n"
            f"- first_name: <code>{html.escape(str(user.get('first_name') or '-'))}</code>\n"
            f"- last_name: <code>{html.escape(str(user.get('last_name') or '-'))}</code>\n"
            f"- –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: <code>{html.escape(str(user.get('date_registered') or '-'))}</code>\n"
            f"- vpn_email: <code>{html.escape(str(user.get('vpn_email') or '-'))}</code>\n"
            f"- last_action: <code>{html.escape(str(user.get('last_action') or '-'))}</code>\n"
        )
        await self.safe_edit_message(chat_id, msg_id, text, reply_markup=kb_admin, parse_mode="HTML")

    async def handle_stats(self, call: types.CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        if not self.is_admin(call.from_user.id):
            await call.answer("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.", show_alert=True)
            return
        
        await state.finish()
        total = count_users()
        with_vpn = count_users_with_vpn()
        promos = count_promos()
        uses = sum_promo_uses()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        from datetime import datetime
        from db import get_connection
        
        with get_connection() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            cursor.execute("""
                SELECT COUNT(*) FROM users 
                WHERE date_registered >= date('now', '-7 days')
            """)
            new_users_week = cursor.fetchone()[0]
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            cursor.execute("""
                SELECT COUNT(*) FROM users 
                WHERE date_registered >= date('now', '-30 days')
            """)
            new_users_month = cursor.fetchone()[0]
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã
            cursor.execute("""
                SELECT COUNT(*) FROM promos 
                WHERE used_count < max_uses
            """)
            active_promos = cursor.fetchone()[0]
            
            # –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            conversion_rate = (with_vpn / total * 100) if total > 0 else 0
        
        text = (
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total}\n"
            f"‚Ä¢ –° –ø–æ–¥–ø–∏—Å–∫–æ–π: {with_vpn} ({conversion_rate:.1f}%)\n"
            f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: +{new_users_week}\n"
            f"‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: +{new_users_month}\n\n"
            f"–ü—Ä–æ–º–æ–∫–æ–¥—ã:\n"
            f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ: {promos}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_promos}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {uses}\n\n"
            f"–ö–æ–Ω–≤–µ—Ä—Å–∏—è: {conversion_rate:.1f}%"
        )
        
        kb = InlineKeyboardMarkup(row_width=1)
        kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin"))
        await edit_menu_text(call, text, kb)

    async def handle_sync(self, call: types.CallbackQuery, state: FSMContext):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î —Å XUI –ø–∞–Ω–µ–ª—å—é."""
        if not self.is_admin(call.from_user.id):
            await call.answer("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.", show_alert=True)
            return
        
        await state.finish()
        session = get_session_cached()
        if not session:
            await call.answer("XUI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True)
            return
        
        await call.answer("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...", show_alert=True)
        
        try:
            stats = sync_users_with_xui(session)
            if "error" in stats:
                text = f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {stats['error']}"
            else:
                text = (
                    f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n\n"
                    f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {stats['users_in_db']}\n"
                    f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ XUI: {stats['users_in_xui']}\n"
                    f"‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {stats['synced']}\n"
                    f"‚Ä¢ –û—á–∏—â–µ–Ω–æ: {stats['cleared']}\n"
                    f"‚Ä¢ –û—à–∏–±–æ–∫: {stats['errors']}"
                )
            
            await edit_menu_text(call, text, admin_kb())
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            await edit_menu_text(call, f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}", admin_kb())

    async def handle_dismiss(self, call: types.CallbackQuery):
        """–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏."""
        try:
            await self.bot.delete_message(call.message.chat.id, call.message.message_id)
        except Exception:
            pass
        await call.answer()

    async def handle_admin_logs(self, call: types.CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–æ–≤."""
        if not self.is_admin(call.from_user.id):
            await call.answer("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.", show_alert=True)
            return
        await state.finish()
        try:
            base_dir = "/app/logs"
            bot_path = os.path.join(base_dir, 'bot.log')
            pay_path = os.path.join(base_dir, 'payments.log')
            # ensure files exist
            os.makedirs(base_dir, exist_ok=True)
            for p in (bot_path, pay_path):
                try:
                    if not os.path.exists(p):
                        open(p, 'a', encoding='utf-8').close()
                except Exception:
                    pass

            def tail(path: str, lines: int = 50) -> str:
                try:
                    with open(path, 'r', encoding='utf-8', errors='ignore') as f:
                        data = f.readlines()
                        return ''.join(data[-lines:]) if data else '(–ø—É—Å—Ç–æ)'
                except FileNotFoundError:
                    return '(—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω)'
                except Exception as e:
                    return f'(–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e})'

            bot_log_raw = tail(bot_path, 50)
            pay_log_raw = tail(pay_path, 50)

            # Prepare safe HTML with hard caps
            def safe_clip(s: str, cap: int = 1800) -> str:
                from html import escape
                s = escape(s)
                if len(s) > cap:
                    return s[-cap:]
                return s

            bot_clip = safe_clip(bot_log_raw, 1800)
            pay_clip = safe_clip(pay_log_raw, 1800)

            text = (
                "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:\n\n"
                "üßæ bot.log (50 —Å—Ç—Ä–æ–∫):\n"
                f"<pre><code>{bot_clip}</code></pre>\n\n"
                "üí≥ payments.log (50 —Å—Ç—Ä–æ–∫):\n"
                f"<pre><code>{pay_clip}</code></pre>"
            )

            # If still too long for Telegram, fallback to sending documents
            if len(text) > 3800:
                kb = InlineKeyboardMarkup(row_width=1)
                kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin"))
                await edit_menu_text_pm(call, "–õ–æ–≥–∏ –±–æ–ª—å—à–∏–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–∞–º–∏ –Ω–∏–∂–µ.", kb, parse_mode="HTML")
                try:
                    from aiogram.types import InputFile
                    await self.bot.send_document(call.message.chat.id, InputFile(bot_path), caption="bot.log (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª)")
                except Exception:
                    pass
                try:
                    from aiogram.types import InputFile
                    await self.bot.send_document(call.message.chat.id, InputFile(pay_path), caption="payments.log (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª)")
                except Exception:
                    pass
                return

            kb = InlineKeyboardMarkup(row_width=1)
            kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin"))
            await edit_menu_text_pm(call, text, kb, parse_mode="HTML")
        except Exception as e:
            logging.error(f"admin_logs_error: {e}")
            await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏.", show_alert=True)
